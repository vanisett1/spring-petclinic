name: Java CI with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Set up JDK 17
  #     uses: actions/setup-java@v1
  #     with:
  #       java-version: 17
  #   - name: Build with Maven
  #     run: mvn -B package --file pom.xml

  opensource-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  code-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test

#---------------- release to GitHub Packages -------------------#
  # release-Github:
  #   # needs: [opensource-security, code-security, build]
  #   # needs: [ build ]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v1
  #       with:
  #         java-version: 17
  #     - name: Set Git user
  #       run: |
  #         git config user.email "actions@github.com"
  #         git config user.name "GitHub Actions"
  #     - name: Publish JAR to GitHub Packages
  #       run: mvn -B release:prepare release:perform -DskipTests
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # # ---------------- Release to Docker Hub ---------------- #
  # release-dockerhub:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     # Set up JDK 17 for the Maven build
  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v1
  #       with:
  #         java-version: 17

  #     # Build the JAR file using Maven
  #     - name: Build JAR with Maven
  #       run: mvn clean package -DskipTests

  #     # Build the Docker image
  #     - name: Build Docker Image
  #       run: |
  #         docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-petclinic-app:${{ github.sha }} .
  #         docker tag ${{ secrets.DOCKER_USERNAME }}/spring-petclinic-app:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/spring-petclinic-app:latest

  #     # Login to Docker Hub
  #     - name: Login to Docker Hub
  #       run: |
  #         echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

  #     # Push the Docker image to Docker Hub
  #     - name: Push to Docker Hub
  #       run: |
  #         docker push ${{ secrets.DOCKER_USERNAME }}/spring-petclinic-app:${{ github.sha }}
  #         docker push ${{ secrets.DOCKER_USERNAME }}/spring-petclinic-app:latest

  # ---------------- Release to Amazon ECR ---------------- #
  release-ecr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up JDK 17 for the Maven build
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      # Build the JAR file using Maven
      - name: Build JAR with Maven
        run: mvn clean package -DskipTests

      # Configure AWS credentials for authentication
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Create ECR repository (if it doesn't exist)
    - name: Create ECR repository (if not exists)
      run: |
        aws ecr describe-repositories --repository-names spring-petclinic-app --region us-east-1 || \
        aws ecr create-repository --repository-name spring-petclinic-app --region us-east-1

      # Login to AWS ECR
      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      # Build the Docker image
      - name: Build Docker Image
        run: |
          docker build -t spring-petclinic-app:${{ github.sha }} .
          docker tag spring-petclinic-app:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/spring-petclinic-app:${{ github.sha }}
          docker tag spring-petclinic-app:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/spring-petclinic-app:latest

      # Push the Docker image to Amazon ECR
      - name: Push to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/spring-petclinic-app:${{ github.sha }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/spring-petclinic-app:latest


  opensource-monitor:
    # needs: [release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor